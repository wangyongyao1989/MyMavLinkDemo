/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

package com.example.mymavlink.manger;


import com.example.mymavlink.msssage.MyLinkStats;


public class MyParser {
    static final String TAG = MyParser.class.getSimpleName();

    enum MAV_states {
        MAVLINK_PARSE_STATE_UNINIT,
        MAVLINK_PARSE_STATE_IDLE,
        MAVLINK_PARSE_STATE_GOT_STX,
        MAVLINK_PARSE_STATE_GOT_LENGTH,
        MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS, // MAVLink 2
        MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS, // MAVLink 2
        MAVLINK_PARSE_STATE_GOT_SEQ,
        MAVLINK_PARSE_STATE_GOT_SYSID,

        MAVLINK_PARSE_STATE_GOT_DESTID,
        MAVLINK_PARSE_STATE_GOT_SRCID,

        MAVLINK_PARSE_STATE_GOT_COMPID,
        MAVLINK_PARSE_STATE_GOT_MSGID1,
        MAVLINK_PARSE_STATE_GOT_MSGID2,
        MAVLINK_PARSE_STATE_GOT_MSGID3,
        MAVLINK_PARSE_STATE_GOT_CRC1,
        MAVLINK_PARSE_STATE_GOT_CRC2,
        MAVLINK_PARSE_STATE_GOT_PAYLOAD,
        MAVLINK_PARSE_STATE_GOT_SIGNATURE,
    }

    private MAV_states state = MAV_states.MAVLINK_PARSE_STATE_UNINIT;

    public MyLinkStats stats;
    private MyLinkPacket m;

    public MyParser() {
        this(false);
    }

    public MyParser(boolean ignoreRadioPacketStats) {
        stats = new MyLinkStats(ignoreRadioPacketStats);
    }

    public MyLinkPacket mavlink_parse_char(int c) {

        // force to 8 bits
        c &= 0xFF;

        switch (state) {
            case MAVLINK_PARSE_STATE_UNINIT:
            case MAVLINK_PARSE_STATE_IDLE:
                // MAVLink 1 and 2
                if (c == MyLinkPacket.MAVLINK_STX) {
                    state = MAV_states.MAVLINK_PARSE_STATE_GOT_STX;
                }
                break;

            case MAVLINK_PARSE_STATE_GOT_STX:
                // MAVLink 1 and 2
                m = new MyLinkPacket(c);
                state = MAV_states.MAVLINK_PARSE_STATE_GOT_LENGTH;
                break;

            case MAVLINK_PARSE_STATE_GOT_LENGTH:
                m.incompatFlags = c;
                if (c != 0 && c != 1) {
                    state = MAV_states.MAVLINK_PARSE_STATE_IDLE;
                    break;
                }
                state = MAV_states.MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS;
                break;

            case MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS:
                m.compatFlags = c;
                state = MAV_states.MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
                break;

            case MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS:
                m.seq = c;
                state = MAV_states.MAVLINK_PARSE_STATE_GOT_SEQ;
                break;

            case MAVLINK_PARSE_STATE_GOT_SEQ:
                // back to MAVLink 1 and 2
                m.sysid = c;
                state = MAV_states.MAVLINK_PARSE_STATE_GOT_SYSID;
                break;

            case MAVLINK_PARSE_STATE_GOT_SYSID:
                m.compid = c;
                state = MAV_states.MAVLINK_PARSE_STATE_GOT_DESTID;
                break;
            case MAVLINK_PARSE_STATE_GOT_DESTID:
                m.compid = c;
                state = MAV_states.MAVLINK_PARSE_STATE_GOT_SRCID;
                break;

            case MAVLINK_PARSE_STATE_GOT_SRCID:
                m.compid = c;
                state = MAV_states.MAVLINK_PARSE_STATE_GOT_COMPID;
                break;

            case MAVLINK_PARSE_STATE_GOT_COMPID:
                // MAVLink 1 and 2
                m.msgid = c;
                state = MAV_states.MAVLINK_PARSE_STATE_GOT_MSGID1;
                if (m.len > 0) {
                    state = MAV_states.MAVLINK_PARSE_STATE_GOT_MSGID3;
                } else {
                    state = MAV_states.MAVLINK_PARSE_STATE_GOT_PAYLOAD;
                }
                break;

            case MAVLINK_PARSE_STATE_GOT_MSGID1:
                m.msgid |= c << 8;
                state = MAV_states.MAVLINK_PARSE_STATE_GOT_MSGID2;
                break;

            case MAVLINK_PARSE_STATE_GOT_MSGID2:
                m.msgid |= c << 16;
                if (m.len > 0) {
                    state = MAV_states.MAVLINK_PARSE_STATE_GOT_MSGID3;
                } else {
                    state = MAV_states.MAVLINK_PARSE_STATE_GOT_PAYLOAD;
                }
                break;

            case MAVLINK_PARSE_STATE_GOT_MSGID3:
                //将payload的数据加入
                m.payload.add((byte) c);
                if (m.payloadIsFilled()) {
                    state = MAV_states.MAVLINK_PARSE_STATE_GOT_PAYLOAD;
                }
                break;

            case MAVLINK_PARSE_STATE_GOT_PAYLOAD:
                boolean crcGen = m.generateCRC(m.payload.size());
                // Check first checksum byte and verify the CRC was successfully generated (msg extra exists)
                if (c != m.crc.getLSB() || !crcGen) {
                    state = MAV_states.MAVLINK_PARSE_STATE_IDLE;
                    stats.crcError();
                } else {
                    state = MAV_states.MAVLINK_PARSE_STATE_GOT_CRC1;
                }
                break;

            case MAVLINK_PARSE_STATE_GOT_CRC1:
                // Check second checksum byte
                if (c != m.crc.getMSB()) {
                    state = MAV_states.MAVLINK_PARSE_STATE_IDLE;
                    stats.crcError();
                } else { // crc is good
//                    stats.newPacket(m);
                    state = MAV_states.MAVLINK_PARSE_STATE_IDLE;
                    stats.crcError();
                }
                break;

            case MAVLINK_PARSE_STATE_GOT_CRC2:
                state = MAV_states.MAVLINK_PARSE_STATE_IDLE;
                stats.crcError();
                break;
        } // switch
        return null;
    }
}
